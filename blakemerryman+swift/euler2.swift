//: ## [Problem 2 - Even Fibonacci numbers](https://projecteuler.net/problem=2)
//:
//: Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//: By starting with 1 and 2, the first 10 terms will be:
//:
//:     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//:
//: By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//: find the sum of the even-valued terms.
//:
//: **Solution:** 4613732

//: Creating a Fibonacci sequence generator allows us to use Swift's built in iteration capabilities.
struct FibonacciSequence: SequenceType {
    
    init(endBefore endBeforeValue: Int) {
        self.endBeforeValue = endBeforeValue
    }
    
    let endBeforeValue: Int
    typealias Generator = AnyGenerator<Int>
    
    func generate() -> Generator {
        var lastTwoElements = (n1: 0, n2: 0)
        return anyGenerator {
            switch lastTwoElements {
            case (0,0):
                lastTwoElements.n2 = 1
                return lastTwoElements.n2
            default:
                let newElements = (n1: lastTwoElements.n2, n2: lastTwoElements.n1 + lastTwoElements.n2)
                lastTwoElements = newElements
                return (newElements.n2 < self.endBeforeValue ? newElements.n2 : nil)
            }
        }
    }
}

//: Simple solution
let solution = FibonacciSequence(endBefore: 4_000_000)
    .filter({ x in x % 2 == 0 })
    .reduce(0, combine: { sum, x in sum + x })

print(solution) // 4613732
